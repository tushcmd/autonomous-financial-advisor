generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")
    role          UserRole  @default(USER)
    hasCompletedOnboarding Boolean @default(false)
    receiveDailyEmails     Boolean @default(true)  // New field for daily email preference

    accounts Account[]
    sessions Session[]

    // Stripe Fields
    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
    
    // Link to portfolios
    portfolios Portfolio[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

// Update your Portfolio model in schema.prisma
model Portfolio {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String        @default("My Portfolio")
  type           PortfolioType @default(DEMO)
  broker         String?       // e.g. "Alpaca", "Binance"
  accountId      String?       // user's account ID with that broker
  longTermGoal   String?       // Already exists in your schema
  portfolioGoal  PortfolioGoal? // New field to store the selected goal
  aiSummary      String?
  autoTrading    Boolean       @default(false)
  cashBalance    Float         @default(0)
  fakeTrades     FakeTrade[]
  realHoldings   RealHolding[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  hasCompletedOnboarding Boolean @default(false) // Track if user has completed onboarding
}

// New enum for predefined portfolio goals
enum PortfolioGoal {
  RETIREMENT
  GROWTH
  INCOME
  PRESERVATION
  SPECULATION
  OTHER
}

enum PortfolioType {
  DEMO
  REAL
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowType String
  status      String
  metadata    String?
  result      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FakeTrade {
  id            String     @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  symbol        String
  shares        Float
  buyPrice      Float
  currentPrice  Float
  buyDate       DateTime   @default(now())
  status        String     @default("open") // "open" or "closed"
}

model RealHolding {
  id            String     @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  symbol        String
  shares        Float
  avgPrice      Float
  currentPrice  Float
  updatedAt     DateTime   @updatedAt
}